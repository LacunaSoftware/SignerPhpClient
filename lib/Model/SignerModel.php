<?php
/**
 * SignerModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Dropsigner (HML)
 *
 * <!--------------------------------------------------------------------------------------------------------------------->    <h2>Authentication</h2>    <p>   In order to call this APIs, you will need an <strong>API key</strong>. Set the API key in the header <span class=\"code\">X-Api-Key</span>:  </p>    <pre>X-Api-Key: your-app|xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</pre>    <!--------------------------------------------------------------------------------------------------------------------->  <br />    <h2>HTTP Codes</h2>    <p>   The APIs will return the following HTTP codes:  </p>    <table>   <thead>    <tr>     <th>Code</th>     <th>Description</th>    </tr>   </thead>   <tbody>    <tr>     <td><strong class=\"model-title\">200 (OK)</strong></td>     <td>Request processed successfully. The response is different for each API, please refer to the operation's documentation</td>    </tr>    <tr>     <td><strong class=\"model-title\">400 (Bad Request)</strong></td>     <td>Syntax error. For instance, when a required field was not provided</td>    </tr>    <tr>     <td><strong class=\"model-title\">401 (Unauthorized)</strong></td>     <td>API key not provided or invalid</td>    </tr>    <tr>     <td><strong class=\"model-title\">403 (Forbidden)</strong></td>     <td>API key is valid, but the application has insufficient permissions to complete the requested operation</td>    </tr>    <tr>     <td><strong class=\"model-title\">422 (Unprocessable Entity)</strong></td>     <td>API error. The response is as defined in <a href=\"#model-ErrorModel\">ErrorModel</a></td>    </tr>   </tbody>  </table>    <br />    <h3>Error Codes</h3>    <p>Some of the error codes returned in a 422 response are provided bellow*:</p>    <ul>   <li>CertificateNotFound</li>   <li>DocumentNotFound</li>   <li>FolderNotFound</li>   <li>CpfMismatch</li>   <li>CpfNotExpected</li>   <li>InvalidFlowAction</li>   <li>DocumentInvalidKey</li>  </ul>    <p style=\"font-size: 0.9em\">   *The codes shown above are the main error codes. Nonetheless, this list is not comprehensive. New codes may be added anytime without previous warning.  </p>    <!--------------------------------------------------------------------------------------------------------------------->    <br />    <h2>Webhooks</h2>    <p>   It is recomended to subscribe to Webhook events <strong>instead</strong> of polling APIs. To do so, enable webhooks and register an URL that will receive a POST request   whenever one of the events bellow occur.  </p>  <p>   All requests have the format described in <a href=\"#model-Webhooks.WebhookModel\">Webhooks.WebhookModel</a>.   The data field varies according to the webhook event type:  </p>      <table>   <thead>    <tr>     <th>Event type</th>     <th>Description</th>     <th>Payload</th>    </tr>   </thead>   <tbody>    <tr>     <td><strong class=\"model-title\">DocumentSigned</strong></td>     <td>Triggered when a document is signed.</td>     <td><a href=\"#model-Webhooks.DocumentSignedModel\">Webhooks.DocumentSignedModel</a></td>    </tr>    <tr>     <td><strong class=\"model-title\">DocumentApproved</strong></td>     <td>Triggered when a document is approved.</td>     <td><a href=\"#model-Webhooks.DocumentApprovedModel\">Webhooks.DocumentApprovedModel</a></td>    </tr>    <tr>     <td><strong class=\"model-title\">DocumentRefused</strong></td>     <td>Triggered when a document is refused.</td>     <td><a href=\"#model-Webhooks.DocumentRefusedModel\">Webhooks.DocumentRefusedModel</a></td>    </tr>    <tr>     <td><strong class=\"model-title\">DocumentConcluded</strong></td>     <td>Triggered when the flow of a document is concluded.</td>     <td><a href=\"#model-Webhooks.DocumentConcludedModel\">Webhooks.DocumentConcludedModel</a></td>    </tr>   </tbody>  </table>    <p>   To register your application URL and enable Webhooks, access the integrations section in your <a href=\"/private/organizations\" target=\"_blank\">organization's details page</a>.  </p>
 *
 * OpenAPI spec version: 1.28.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.20
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Lacuna\Signer\Model;

use \ArrayAccess;
use \Lacuna\Signer\ObjectSerializer;

/**
 * SignerModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SignerModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SignerModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'subjectName' => 'string',
'emailAddress' => 'string',
'issuerName' => 'string',
'identifier' => 'string',
'companyName' => 'string',
'companyIdentifier' => 'string',
'isElectronic' => 'bool',
'signingTime' => '\DateTime',
'certificateThumbprint' => 'string',
'evidences' => '\Lacuna\Signer\Model\SignatureEvidencesModel',
'attributeCertificates' => '\Lacuna\Signer\Model\CertificatesAttributeCertificateInfoModel[]',
'validationResults' => '\Lacuna\Signer\Model\ValidationResultsModel'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'subjectName' => null,
'emailAddress' => null,
'issuerName' => null,
'identifier' => null,
'companyName' => null,
'companyIdentifier' => null,
'isElectronic' => null,
'signingTime' => 'date-time',
'certificateThumbprint' => null,
'evidences' => null,
'attributeCertificates' => null,
'validationResults' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'subjectName' => 'subjectName',
'emailAddress' => 'emailAddress',
'issuerName' => 'issuerName',
'identifier' => 'identifier',
'companyName' => 'companyName',
'companyIdentifier' => 'companyIdentifier',
'isElectronic' => 'isElectronic',
'signingTime' => 'signingTime',
'certificateThumbprint' => 'certificateThumbprint',
'evidences' => 'evidences',
'attributeCertificates' => 'attributeCertificates',
'validationResults' => 'validationResults'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'subjectName' => 'setSubjectName',
'emailAddress' => 'setEmailAddress',
'issuerName' => 'setIssuerName',
'identifier' => 'setIdentifier',
'companyName' => 'setCompanyName',
'companyIdentifier' => 'setCompanyIdentifier',
'isElectronic' => 'setIsElectronic',
'signingTime' => 'setSigningTime',
'certificateThumbprint' => 'setCertificateThumbprint',
'evidences' => 'setEvidences',
'attributeCertificates' => 'setAttributeCertificates',
'validationResults' => 'setValidationResults'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'subjectName' => 'getSubjectName',
'emailAddress' => 'getEmailAddress',
'issuerName' => 'getIssuerName',
'identifier' => 'getIdentifier',
'companyName' => 'getCompanyName',
'companyIdentifier' => 'getCompanyIdentifier',
'isElectronic' => 'getIsElectronic',
'signingTime' => 'getSigningTime',
'certificateThumbprint' => 'getCertificateThumbprint',
'evidences' => 'getEvidences',
'attributeCertificates' => 'getAttributeCertificates',
'validationResults' => 'getValidationResults'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['subjectName'] = isset($data['subjectName']) ? $data['subjectName'] : null;
        $this->container['emailAddress'] = isset($data['emailAddress']) ? $data['emailAddress'] : null;
        $this->container['issuerName'] = isset($data['issuerName']) ? $data['issuerName'] : null;
        $this->container['identifier'] = isset($data['identifier']) ? $data['identifier'] : null;
        $this->container['companyName'] = isset($data['companyName']) ? $data['companyName'] : null;
        $this->container['companyIdentifier'] = isset($data['companyIdentifier']) ? $data['companyIdentifier'] : null;
        $this->container['isElectronic'] = isset($data['isElectronic']) ? $data['isElectronic'] : null;
        $this->container['signingTime'] = isset($data['signingTime']) ? $data['signingTime'] : null;
        $this->container['certificateThumbprint'] = isset($data['certificateThumbprint']) ? $data['certificateThumbprint'] : null;
        $this->container['evidences'] = isset($data['evidences']) ? $data['evidences'] : null;
        $this->container['attributeCertificates'] = isset($data['attributeCertificates']) ? $data['attributeCertificates'] : null;
        $this->container['validationResults'] = isset($data['validationResults']) ? $data['validationResults'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets subjectName
     *
     * @return string
     */
    public function getSubjectName()
    {
        return $this->container['subjectName'];
    }

    /**
     * Sets subjectName
     *
     * @param string $subjectName subjectName
     *
     * @return $this
     */
    public function setSubjectName($subjectName)
    {
        $this->container['subjectName'] = $subjectName;

        return $this;
    }

    /**
     * Gets emailAddress
     *
     * @return string
     */
    public function getEmailAddress()
    {
        return $this->container['emailAddress'];
    }

    /**
     * Sets emailAddress
     *
     * @param string $emailAddress emailAddress
     *
     * @return $this
     */
    public function setEmailAddress($emailAddress)
    {
        $this->container['emailAddress'] = $emailAddress;

        return $this;
    }

    /**
     * Gets issuerName
     *
     * @return string
     */
    public function getIssuerName()
    {
        return $this->container['issuerName'];
    }

    /**
     * Sets issuerName
     *
     * @param string $issuerName issuerName
     *
     * @return $this
     */
    public function setIssuerName($issuerName)
    {
        $this->container['issuerName'] = $issuerName;

        return $this;
    }

    /**
     * Gets identifier
     *
     * @return string
     */
    public function getIdentifier()
    {
        return $this->container['identifier'];
    }

    /**
     * Sets identifier
     *
     * @param string $identifier identifier
     *
     * @return $this
     */
    public function setIdentifier($identifier)
    {
        $this->container['identifier'] = $identifier;

        return $this;
    }

    /**
     * Gets companyName
     *
     * @return string
     */
    public function getCompanyName()
    {
        return $this->container['companyName'];
    }

    /**
     * Sets companyName
     *
     * @param string $companyName companyName
     *
     * @return $this
     */
    public function setCompanyName($companyName)
    {
        $this->container['companyName'] = $companyName;

        return $this;
    }

    /**
     * Gets companyIdentifier
     *
     * @return string
     */
    public function getCompanyIdentifier()
    {
        return $this->container['companyIdentifier'];
    }

    /**
     * Sets companyIdentifier
     *
     * @param string $companyIdentifier companyIdentifier
     *
     * @return $this
     */
    public function setCompanyIdentifier($companyIdentifier)
    {
        $this->container['companyIdentifier'] = $companyIdentifier;

        return $this;
    }

    /**
     * Gets isElectronic
     *
     * @return bool
     */
    public function getIsElectronic()
    {
        return $this->container['isElectronic'];
    }

    /**
     * Sets isElectronic
     *
     * @param bool $isElectronic isElectronic
     *
     * @return $this
     */
    public function setIsElectronic($isElectronic)
    {
        $this->container['isElectronic'] = $isElectronic;

        return $this;
    }

    /**
     * Gets signingTime
     *
     * @return \DateTime
     */
    public function getSigningTime()
    {
        return $this->container['signingTime'];
    }

    /**
     * Sets signingTime
     *
     * @param \DateTime $signingTime signingTime
     *
     * @return $this
     */
    public function setSigningTime($signingTime)
    {
        $this->container['signingTime'] = $signingTime;

        return $this;
    }

    /**
     * Gets certificateThumbprint
     *
     * @return string
     */
    public function getCertificateThumbprint()
    {
        return $this->container['certificateThumbprint'];
    }

    /**
     * Sets certificateThumbprint
     *
     * @param string $certificateThumbprint certificateThumbprint
     *
     * @return $this
     */
    public function setCertificateThumbprint($certificateThumbprint)
    {
        $this->container['certificateThumbprint'] = $certificateThumbprint;

        return $this;
    }

    /**
     * Gets evidences
     *
     * @return \Lacuna\Signer\Model\SignatureEvidencesModel
     */
    public function getEvidences()
    {
        return $this->container['evidences'];
    }

    /**
     * Sets evidences
     *
     * @param \Lacuna\Signer\Model\SignatureEvidencesModel $evidences evidences
     *
     * @return $this
     */
    public function setEvidences($evidences)
    {
        $this->container['evidences'] = $evidences;

        return $this;
    }

    /**
     * Gets attributeCertificates
     *
     * @return \Lacuna\Signer\Model\CertificatesAttributeCertificateInfoModel[]
     */
    public function getAttributeCertificates()
    {
        return $this->container['attributeCertificates'];
    }

    /**
     * Sets attributeCertificates
     *
     * @param \Lacuna\Signer\Model\CertificatesAttributeCertificateInfoModel[] $attributeCertificates attributeCertificates
     *
     * @return $this
     */
    public function setAttributeCertificates($attributeCertificates)
    {
        $this->container['attributeCertificates'] = $attributeCertificates;

        return $this;
    }

    /**
     * Gets validationResults
     *
     * @return \Lacuna\Signer\Model\ValidationResultsModel
     */
    public function getValidationResults()
    {
        return $this->container['validationResults'];
    }

    /**
     * Sets validationResults
     *
     * @param \Lacuna\Signer\Model\ValidationResultsModel $validationResults validationResults
     *
     * @return $this
     */
    public function setValidationResults($validationResults)
    {
        $this->container['validationResults'] = $validationResults;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

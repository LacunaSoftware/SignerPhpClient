<?php
/**
 * DocumentsDocumentModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Lacuna\Signer
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Dropsigner (HML)
 *
 * <!--------------------------------------------------------------------------------------------------------------------->    <h2>Authentication</h2>    <p>   In order to call this APIs, you will need an <strong>API key</strong>. Set the API key in the header <span class=\"code\">X-Api-Key</span>:  </p>    <pre>X-Api-Key: your-app|xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</pre>    <!--------------------------------------------------------------------------------------------------------------------->  <br />    <h2>HTTP Codes</h2>    <p>   The APIs will return the following HTTP codes:  </p>    <table>   <thead>    <tr>     <th>Code</th>     <th>Description</th>    </tr>   </thead>   <tbody>    <tr>     <td><strong class=\"model-title\">200 (OK)</strong></td>     <td>Request processed successfully. The response is different for each API, please refer to the operation's documentation</td>    </tr>    <tr>     <td><strong class=\"model-title\">400 (Bad Request)</strong></td>     <td>Syntax error. For instance, when a required field was not provided</td>    </tr>    <tr>     <td><strong class=\"model-title\">401 (Unauthorized)</strong></td>     <td>API key not provided or invalid</td>    </tr>    <tr>     <td><strong class=\"model-title\">403 (Forbidden)</strong></td>     <td>API key is valid, but the application has insufficient permissions to complete the requested operation</td>    </tr>    <tr>     <td><strong class=\"model-title\">422 (Unprocessable Entity)</strong></td>     <td>API error. The response is as defined in <a href=\"#model-ErrorModel\">ErrorModel</a></td>    </tr>   </tbody>  </table>    <br />    <h3>Error Codes</h3>    <p>Some of the error codes returned in a 422 response are provided bellow*:</p>    <ul>   <li>CertificateNotFound</li>   <li>DocumentNotFound</li>   <li>FolderNotFound</li>   <li>CpfMismatch</li>   <li>CpfNotExpected</li>   <li>InvalidFlowAction</li>   <li>DocumentInvalidKey</li>  </ul>    <p style=\"font-size: 0.9em\">   *The codes shown above are the main error codes. Nonetheless, this list is not comprehensive. New codes may be added anytime without previous warning.  </p>    <!--------------------------------------------------------------------------------------------------------------------->    <br />    <h2>Webhooks</h2>    <p>   It is recomended to subscribe to Webhook events <strong>instead</strong> of polling APIs. To do so, enable webhooks and register an URL that will receive a POST request   whenever one of the events bellow occur.  </p>  <p>   All requests have the format described in <a href=\"#model-Webhooks.WebhookModel\">Webhooks.WebhookModel</a>.   The data field varies according to the webhook event type:  </p>      <table>   <thead>    <tr>     <th>Event type</th>     <th>Description</th>     <th>Payload</th>    </tr>   </thead>   <tbody>    <tr>     <td><strong class=\"model-title\">DocumentSigned</strong></td>     <td>Triggered when a document is signed.</td>     <td><a href=\"#model-Webhooks.DocumentSignedModel\">Webhooks.DocumentSignedModel</a></td>    </tr>    <tr>     <td><strong class=\"model-title\">DocumentApproved</strong></td>     <td>Triggered when a document is approved.</td>     <td><a href=\"#model-Webhooks.DocumentApprovedModel\">Webhooks.DocumentApprovedModel</a></td>    </tr>    <tr>     <td><strong class=\"model-title\">DocumentRefused</strong></td>     <td>Triggered when a document is refused.</td>     <td><a href=\"#model-Webhooks.DocumentRefusedModel\">Webhooks.DocumentRefusedModel</a></td>    </tr>    <tr>     <td><strong class=\"model-title\">DocumentConcluded</strong></td>     <td>Triggered when the flow of a document is concluded.</td>     <td><a href=\"#model-Webhooks.DocumentConcludedModel\">Webhooks.DocumentConcludedModel</a></td>    </tr>    <tr>     <td><strong class=\"model-title\">DocumentCanceled</strong></td>     <td>Triggered when the document is canceled.</td>     <td><a href=\"#model-Webhooks.DocumentCanceledModel\">Webhooks.DocumentCanceledModel</a></td>    </tr>   </tbody>  </table>    <p>   To register your application URL and enable Webhooks, access the integrations section in your <a href=\"/private/organizations\" target=\"_blank\">organization's details page</a>.  </p>
 *
 * OpenAPI spec version: 1.33.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.20
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Lacuna\Signer\Model;

use \ArrayAccess;
use \Lacuna\Signer\ObjectSerializer;

/**
 * DocumentsDocumentModel Class Doc Comment
 *
 * @category Class
 * @package  Lacuna\Signer
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DocumentsDocumentModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Documents.DocumentModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'checksumMd5' => 'string',
'isDeleted' => 'bool',
'flowActions' => '\Lacuna\Signer\Model\FlowActionsFlowActionModel[]',
'observers' => '\Lacuna\Signer\Model\ObserversObserverModel[]',
'attachments' => '\Lacuna\Signer\Model\AttachmentsAttachmentModel[]',
'permissions' => '\Lacuna\Signer\Model\DocumentsDocumentPermissionsModel',
'notifiedEmails' => 'string[]',
'id' => 'string',
'name' => 'string',
'filename' => 'string',
'fileSize' => 'int',
'mimeType' => 'string',
'hasSignature' => 'bool',
'status' => '\Lacuna\Signer\Model\DocumentStatus',
'isConcluded' => 'bool',
'folder' => '\Lacuna\Signer\Model\FoldersFolderInfoModel',
'organization' => '\Lacuna\Signer\Model\OrganizationsOrganizationInfoModel',
'creationDate' => '\DateTime',
'updateDate' => '\DateTime',
'expirationDate' => '\DateTime',
'expirationDateWithoutTime' => 'string',
'createdBy' => '\Lacuna\Signer\Model\DocumentsCreatorModel',
'description' => 'string',
'forceCadesSignature' => 'bool',
'isScanned' => 'bool',
'isEnvelope' => 'bool',
'statusUpdatedBy' => '\Lacuna\Signer\Model\AgentsAgentModel',
'statusUpdateReason' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'checksumMd5' => null,
'isDeleted' => null,
'flowActions' => null,
'observers' => null,
'attachments' => null,
'permissions' => null,
'notifiedEmails' => null,
'id' => 'uuid',
'name' => null,
'filename' => null,
'fileSize' => 'int64',
'mimeType' => null,
'hasSignature' => null,
'status' => null,
'isConcluded' => null,
'folder' => null,
'organization' => null,
'creationDate' => 'date-time',
'updateDate' => 'date-time',
'expirationDate' => 'date-time',
'expirationDateWithoutTime' => null,
'createdBy' => null,
'description' => null,
'forceCadesSignature' => null,
'isScanned' => null,
'isEnvelope' => null,
'statusUpdatedBy' => null,
'statusUpdateReason' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'checksumMd5' => 'checksumMd5',
'isDeleted' => 'isDeleted',
'flowActions' => 'flowActions',
'observers' => 'observers',
'attachments' => 'attachments',
'permissions' => 'permissions',
'notifiedEmails' => 'notifiedEmails',
'id' => 'id',
'name' => 'name',
'filename' => 'filename',
'fileSize' => 'fileSize',
'mimeType' => 'mimeType',
'hasSignature' => 'hasSignature',
'status' => 'status',
'isConcluded' => 'isConcluded',
'folder' => 'folder',
'organization' => 'organization',
'creationDate' => 'creationDate',
'updateDate' => 'updateDate',
'expirationDate' => 'expirationDate',
'expirationDateWithoutTime' => 'expirationDateWithoutTime',
'createdBy' => 'createdBy',
'description' => 'description',
'forceCadesSignature' => 'forceCadesSignature',
'isScanned' => 'isScanned',
'isEnvelope' => 'isEnvelope',
'statusUpdatedBy' => 'statusUpdatedBy',
'statusUpdateReason' => 'statusUpdateReason'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'checksumMd5' => 'setChecksumMd5',
'isDeleted' => 'setIsDeleted',
'flowActions' => 'setFlowActions',
'observers' => 'setObservers',
'attachments' => 'setAttachments',
'permissions' => 'setPermissions',
'notifiedEmails' => 'setNotifiedEmails',
'id' => 'setId',
'name' => 'setName',
'filename' => 'setFilename',
'fileSize' => 'setFileSize',
'mimeType' => 'setMimeType',
'hasSignature' => 'setHasSignature',
'status' => 'setStatus',
'isConcluded' => 'setIsConcluded',
'folder' => 'setFolder',
'organization' => 'setOrganization',
'creationDate' => 'setCreationDate',
'updateDate' => 'setUpdateDate',
'expirationDate' => 'setExpirationDate',
'expirationDateWithoutTime' => 'setExpirationDateWithoutTime',
'createdBy' => 'setCreatedBy',
'description' => 'setDescription',
'forceCadesSignature' => 'setForceCadesSignature',
'isScanned' => 'setIsScanned',
'isEnvelope' => 'setIsEnvelope',
'statusUpdatedBy' => 'setStatusUpdatedBy',
'statusUpdateReason' => 'setStatusUpdateReason'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'checksumMd5' => 'getChecksumMd5',
'isDeleted' => 'getIsDeleted',
'flowActions' => 'getFlowActions',
'observers' => 'getObservers',
'attachments' => 'getAttachments',
'permissions' => 'getPermissions',
'notifiedEmails' => 'getNotifiedEmails',
'id' => 'getId',
'name' => 'getName',
'filename' => 'getFilename',
'fileSize' => 'getFileSize',
'mimeType' => 'getMimeType',
'hasSignature' => 'getHasSignature',
'status' => 'getStatus',
'isConcluded' => 'getIsConcluded',
'folder' => 'getFolder',
'organization' => 'getOrganization',
'creationDate' => 'getCreationDate',
'updateDate' => 'getUpdateDate',
'expirationDate' => 'getExpirationDate',
'expirationDateWithoutTime' => 'getExpirationDateWithoutTime',
'createdBy' => 'getCreatedBy',
'description' => 'getDescription',
'forceCadesSignature' => 'getForceCadesSignature',
'isScanned' => 'getIsScanned',
'isEnvelope' => 'getIsEnvelope',
'statusUpdatedBy' => 'getStatusUpdatedBy',
'statusUpdateReason' => 'getStatusUpdateReason'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['checksumMd5'] = isset($data['checksumMd5']) ? $data['checksumMd5'] : null;
        $this->container['isDeleted'] = isset($data['isDeleted']) ? $data['isDeleted'] : null;
        $this->container['flowActions'] = isset($data['flowActions']) ? $data['flowActions'] : null;
        $this->container['observers'] = isset($data['observers']) ? $data['observers'] : null;
        $this->container['attachments'] = isset($data['attachments']) ? $data['attachments'] : null;
        $this->container['permissions'] = isset($data['permissions']) ? $data['permissions'] : null;
        $this->container['notifiedEmails'] = isset($data['notifiedEmails']) ? $data['notifiedEmails'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['filename'] = isset($data['filename']) ? $data['filename'] : null;
        $this->container['fileSize'] = isset($data['fileSize']) ? $data['fileSize'] : null;
        $this->container['mimeType'] = isset($data['mimeType']) ? $data['mimeType'] : null;
        $this->container['hasSignature'] = isset($data['hasSignature']) ? $data['hasSignature'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['isConcluded'] = isset($data['isConcluded']) ? $data['isConcluded'] : null;
        $this->container['folder'] = isset($data['folder']) ? $data['folder'] : null;
        $this->container['organization'] = isset($data['organization']) ? $data['organization'] : null;
        $this->container['creationDate'] = isset($data['creationDate']) ? $data['creationDate'] : null;
        $this->container['updateDate'] = isset($data['updateDate']) ? $data['updateDate'] : null;
        $this->container['expirationDate'] = isset($data['expirationDate']) ? $data['expirationDate'] : null;
        $this->container['expirationDateWithoutTime'] = isset($data['expirationDateWithoutTime']) ? $data['expirationDateWithoutTime'] : null;
        $this->container['createdBy'] = isset($data['createdBy']) ? $data['createdBy'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['forceCadesSignature'] = isset($data['forceCadesSignature']) ? $data['forceCadesSignature'] : null;
        $this->container['isScanned'] = isset($data['isScanned']) ? $data['isScanned'] : null;
        $this->container['isEnvelope'] = isset($data['isEnvelope']) ? $data['isEnvelope'] : null;
        $this->container['statusUpdatedBy'] = isset($data['statusUpdatedBy']) ? $data['statusUpdatedBy'] : null;
        $this->container['statusUpdateReason'] = isset($data['statusUpdateReason']) ? $data['statusUpdateReason'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets checksumMd5
     *
     * @return string
     */
    public function getChecksumMd5()
    {
        return $this->container['checksumMd5'];
    }

    /**
     * Sets checksumMd5
     *
     * @param string $checksumMd5 MD5 checksum of the document's file.
     *
     * @return $this
     */
    public function setChecksumMd5($checksumMd5)
    {
        $this->container['checksumMd5'] = $checksumMd5;

        return $this;
    }

    /**
     * Gets isDeleted
     *
     * @return bool
     */
    public function getIsDeleted()
    {
        return $this->container['isDeleted'];
    }

    /**
     * Sets isDeleted
     *
     * @param bool $isDeleted True if the document is deleted.
     *
     * @return $this
     */
    public function setIsDeleted($isDeleted)
    {
        $this->container['isDeleted'] = $isDeleted;

        return $this;
    }

    /**
     * Gets flowActions
     *
     * @return \Lacuna\Signer\Model\FlowActionsFlowActionModel[]
     */
    public function getFlowActions()
    {
        return $this->container['flowActions'];
    }

    /**
     * Sets flowActions
     *
     * @param \Lacuna\Signer\Model\FlowActionsFlowActionModel[] $flowActions Signers and approvers of the document.
     *
     * @return $this
     */
    public function setFlowActions($flowActions)
    {
        $this->container['flowActions'] = $flowActions;

        return $this;
    }

    /**
     * Gets observers
     *
     * @return \Lacuna\Signer\Model\ObserversObserverModel[]
     */
    public function getObservers()
    {
        return $this->container['observers'];
    }

    /**
     * Sets observers
     *
     * @param \Lacuna\Signer\Model\ObserversObserverModel[] $observers Observers of the document.
     *
     * @return $this
     */
    public function setObservers($observers)
    {
        $this->container['observers'] = $observers;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \Lacuna\Signer\Model\AttachmentsAttachmentModel[]
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param \Lacuna\Signer\Model\AttachmentsAttachmentModel[] $attachments Document attachments
     *
     * @return $this
     */
    public function setAttachments($attachments)
    {
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets permissions
     *
     * @return \Lacuna\Signer\Model\DocumentsDocumentPermissionsModel
     */
    public function getPermissions()
    {
        return $this->container['permissions'];
    }

    /**
     * Sets permissions
     *
     * @param \Lacuna\Signer\Model\DocumentsDocumentPermissionsModel $permissions permissions
     *
     * @return $this
     */
    public function setPermissions($permissions)
    {
        $this->container['permissions'] = $permissions;

        return $this;
    }

    /**
     * Gets notifiedEmails
     *
     * @return string[]
     */
    public function getNotifiedEmails()
    {
        return $this->container['notifiedEmails'];
    }

    /**
     * Sets notifiedEmails
     *
     * @param string[] $notifiedEmails notifiedEmails
     *
     * @return $this
     */
    public function setNotifiedEmails($notifiedEmails)
    {
        $this->container['notifiedEmails'] = $notifiedEmails;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets filename
     *
     * @return string
     */
    public function getFilename()
    {
        return $this->container['filename'];
    }

    /**
     * Sets filename
     *
     * @param string $filename The document's file name.
     *
     * @return $this
     */
    public function setFilename($filename)
    {
        $this->container['filename'] = $filename;

        return $this;
    }

    /**
     * Gets fileSize
     *
     * @return int
     */
    public function getFileSize()
    {
        return $this->container['fileSize'];
    }

    /**
     * Sets fileSize
     *
     * @param int $fileSize The document's file size in bytes.
     *
     * @return $this
     */
    public function setFileSize($fileSize)
    {
        $this->container['fileSize'] = $fileSize;

        return $this;
    }

    /**
     * Gets mimeType
     *
     * @return string
     */
    public function getMimeType()
    {
        return $this->container['mimeType'];
    }

    /**
     * Sets mimeType
     *
     * @param string $mimeType The document's file mime type.
     *
     * @return $this
     */
    public function setMimeType($mimeType)
    {
        $this->container['mimeType'] = $mimeType;

        return $this;
    }

    /**
     * Gets hasSignature
     *
     * @return bool
     */
    public function getHasSignature()
    {
        return $this->container['hasSignature'];
    }

    /**
     * Sets hasSignature
     *
     * @param bool $hasSignature True if the document was already signed once.
     *
     * @return $this
     */
    public function setHasSignature($hasSignature)
    {
        $this->container['hasSignature'] = $hasSignature;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Lacuna\Signer\Model\DocumentStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Lacuna\Signer\Model\DocumentStatus $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets isConcluded
     *
     * @return bool
     */
    public function getIsConcluded()
    {
        return $this->container['isConcluded'];
    }

    /**
     * Sets isConcluded
     *
     * @param bool $isConcluded [DEPRECATED] True if all actions requested in the document are concluded. Please use Lacuna.Signer.Api.Documents.DocumentInfoModel.Status instead.
     *
     * @return $this
     */
    public function setIsConcluded($isConcluded)
    {
        $this->container['isConcluded'] = $isConcluded;

        return $this;
    }

    /**
     * Gets folder
     *
     * @return \Lacuna\Signer\Model\FoldersFolderInfoModel
     */
    public function getFolder()
    {
        return $this->container['folder'];
    }

    /**
     * Sets folder
     *
     * @param \Lacuna\Signer\Model\FoldersFolderInfoModel $folder folder
     *
     * @return $this
     */
    public function setFolder($folder)
    {
        $this->container['folder'] = $folder;

        return $this;
    }

    /**
     * Gets organization
     *
     * @return \Lacuna\Signer\Model\OrganizationsOrganizationInfoModel
     */
    public function getOrganization()
    {
        return $this->container['organization'];
    }

    /**
     * Sets organization
     *
     * @param \Lacuna\Signer\Model\OrganizationsOrganizationInfoModel $organization organization
     *
     * @return $this
     */
    public function setOrganization($organization)
    {
        $this->container['organization'] = $organization;

        return $this;
    }

    /**
     * Gets creationDate
     *
     * @return \DateTime
     */
    public function getCreationDate()
    {
        return $this->container['creationDate'];
    }

    /**
     * Sets creationDate
     *
     * @param \DateTime $creationDate The date the document was created.
     *
     * @return $this
     */
    public function setCreationDate($creationDate)
    {
        $this->container['creationDate'] = $creationDate;

        return $this;
    }

    /**
     * Gets updateDate
     *
     * @return \DateTime
     */
    public function getUpdateDate()
    {
        return $this->container['updateDate'];
    }

    /**
     * Sets updateDate
     *
     * @param \DateTime $updateDate The date of the last update to the document. This includes the following actions: moving to folder, signing, approving, deleting and editing the flow.
     *
     * @return $this
     */
    public function setUpdateDate($updateDate)
    {
        $this->container['updateDate'] = $updateDate;

        return $this;
    }

    /**
     * Gets expirationDate
     *
     * @return \DateTime
     */
    public function getExpirationDate()
    {
        return $this->container['expirationDate'];
    }

    /**
     * Sets expirationDate
     *
     * @param \DateTime $expirationDate The expiration date of the document in the default timezone.
     *
     * @return $this
     */
    public function setExpirationDate($expirationDate)
    {
        $this->container['expirationDate'] = $expirationDate;

        return $this;
    }

    /**
     * Gets expirationDateWithoutTime
     *
     * @return string
     */
    public function getExpirationDateWithoutTime()
    {
        return $this->container['expirationDateWithoutTime'];
    }

    /**
     * Sets expirationDateWithoutTime
     *
     * @param string $expirationDateWithoutTime The expiration date without time: in yyyy-MM-dd format (useful for display purposes).
     *
     * @return $this
     */
    public function setExpirationDateWithoutTime($expirationDateWithoutTime)
    {
        $this->container['expirationDateWithoutTime'] = $expirationDateWithoutTime;

        return $this;
    }

    /**
     * Gets createdBy
     *
     * @return \Lacuna\Signer\Model\DocumentsCreatorModel
     */
    public function getCreatedBy()
    {
        return $this->container['createdBy'];
    }

    /**
     * Sets createdBy
     *
     * @param \Lacuna\Signer\Model\DocumentsCreatorModel $createdBy createdBy
     *
     * @return $this
     */
    public function setCreatedBy($createdBy)
    {
        $this->container['createdBy'] = $createdBy;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets forceCadesSignature
     *
     * @return bool
     */
    public function getForceCadesSignature()
    {
        return $this->container['forceCadesSignature'];
    }

    /**
     * Sets forceCadesSignature
     *
     * @param bool $forceCadesSignature forceCadesSignature
     *
     * @return $this
     */
    public function setForceCadesSignature($forceCadesSignature)
    {
        $this->container['forceCadesSignature'] = $forceCadesSignature;

        return $this;
    }

    /**
     * Gets isScanned
     *
     * @return bool
     */
    public function getIsScanned()
    {
        return $this->container['isScanned'];
    }

    /**
     * Sets isScanned
     *
     * @param bool $isScanned True if the document source was a scanning process.
     *
     * @return $this
     */
    public function setIsScanned($isScanned)
    {
        $this->container['isScanned'] = $isScanned;

        return $this;
    }

    /**
     * Gets isEnvelope
     *
     * @return bool
     */
    public function getIsEnvelope()
    {
        return $this->container['isEnvelope'];
    }

    /**
     * Sets isEnvelope
     *
     * @param bool $isEnvelope True if the document is an envelope (Lacuna.Signer.Api.Documents.CreateDocumentRequest.IsEnvelope).
     *
     * @return $this
     */
    public function setIsEnvelope($isEnvelope)
    {
        $this->container['isEnvelope'] = $isEnvelope;

        return $this;
    }

    /**
     * Gets statusUpdatedBy
     *
     * @return \Lacuna\Signer\Model\AgentsAgentModel
     */
    public function getStatusUpdatedBy()
    {
        return $this->container['statusUpdatedBy'];
    }

    /**
     * Sets statusUpdatedBy
     *
     * @param \Lacuna\Signer\Model\AgentsAgentModel $statusUpdatedBy statusUpdatedBy
     *
     * @return $this
     */
    public function setStatusUpdatedBy($statusUpdatedBy)
    {
        $this->container['statusUpdatedBy'] = $statusUpdatedBy;

        return $this;
    }

    /**
     * Gets statusUpdateReason
     *
     * @return string
     */
    public function getStatusUpdateReason()
    {
        return $this->container['statusUpdateReason'];
    }

    /**
     * Sets statusUpdateReason
     *
     * @param string $statusUpdateReason The reason for the status update (see \"StatusUpdatedBy\" property).
     *
     * @return $this
     */
    public function setStatusUpdateReason($statusUpdateReason)
    {
        $this->container['statusUpdateReason'] = $statusUpdateReason;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
